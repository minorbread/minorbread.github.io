<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[hexo+next博客搭建教程]]></title>
      <url>/2017/08/21/1/</url>
      <content type="html"><![CDATA[<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">markdown</a>（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。简易教程</p>
<h1 id="搭建环境配置"><a href="#搭建环境配置" class="headerlink" title="搭建环境配置"></a>搭建环境配置</h1><ul>
<li>下载安装<a href="http://nodejs.cn/download/" target="_blank" rel="external">nodejs</a></li>
<li>下载安装<a href="https://git-scm.com/downloads" target="_blank" rel="external">git</a></li>
<li>注册<a href="https://github.com/join?source=header-home" target="_blank" rel="external">github</a>账号</li>
<li>下载安装hexo: 打开命令行输入(linux系统要加 sudo):</li>
</ul>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>至此hexo的搭建环境基本配好，可以开始搭建本地博客了</p>
<h1 id="本地搭建博客"><a href="#本地搭建博客" class="headerlink" title="本地搭建博客"></a>本地搭建博客</h1><p>  初始化博客,命令行输入:</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init blog</div></pre></td></tr></table></figure>
<p>当命令行出现 <code>Start blogging with Hexo!</code> 说明博客模板已生成成功<br>进入刚才创建的文件夹，运行:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd blog </div><div class="line">hexo server</div></pre></td></tr></table></figure></p>
<p>在浏览器上输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a><br>当我们看到浏览器显示<br><img src="http://img1.ph.126.net/XErC8XQyT63mfKfroAL7Kg==/1273955744610619279.png" alt="cmd-markdown-logo"><br>就说明本地博客搭建成功</p>
<h1 id="博客的基本配置"><a href="#博客的基本配置" class="headerlink" title="博客的基本配置"></a>博客的基本配置</h1><p>初始化本地博客后，我们需要更改配置文件，配置文件从博客文件夹中打开，其命名为<code>_config.yml</code>,我们把它称为<code>站点配置文件</code>,而在博客中的theme文件夹也有一个<code>_config.yml</code>，它被叫做主题配置文件。<br>而配置文件可能因版本的差异而不同，在此报下我使用的hexo版本:<code>hexo: 3.3.8</code> 和<code>hexo-cli: 1.0.3</code></p>
<p>打开<code>_config.yml</code>一眼能看到</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Site</div><div class="line">title: Hexo</div><div class="line">subtitle:</div><div class="line">description:</div><div class="line">author: John Doe</div><div class="line">language:</div><div class="line">timezone:</div><div class="line"><span class="meta">#</span>许多其他的配置信息#</div></pre></td></tr></table></figure>
<p>我们可以先把<code>title</code>和<code>author</code>改成自己博客名字和作者姓名，接着在<code>language:</code>项添加<code>zh-Hans</code>改成中文显示，切记每一个配置前必须加一个空格，否则将运行不了！<br>这就是站点的基本配置，而其它的配置基本是不用碰的，但如果你想了解其它配置，点击☞ <a href="https://hexo.io/zh-cn/docs/configuration.html" target="_blank" rel="external">了解其他配置</a></p>
<h1 id="将上传博客到GitHub"><a href="#将上传博客到GitHub" class="headerlink" title="将上传博客到GitHub"></a>将上传博客到GitHub</h1><h2 id="本地上传准备"><a href="#本地上传准备" class="headerlink" title="本地上传准备"></a>本地上传准备</h2><p>  在上传博客之前，我们需要在本地做好准备工作，以便后续对接，<br>  在博客文件夹下输入命令来安装hexo关于github模块:<br>  <code>npm install hexo-deployer-git –-save</code></p>
<p>  接着打开<code>_config.yml</code>，将其拖到最下面，我们可以看到<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Deployment</div><div class="line"><span class="meta">#</span># Docs: https://hexo.io/docs/deployment.html</div><div class="line">deploy:</div><div class="line">type:</div></pre></td></tr></table></figure></p>
<p>  将其改成<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">  type: git</div><div class="line">  repository: </div><div class="line">  branch: master</div></pre></td></tr></table></figure></p>
<p>  本地上传准备基本完成</p>
<h2 id="github项目搭建"><a href="#github项目搭建" class="headerlink" title="github项目搭建"></a>github项目搭建</h2><p>  我们已在<code>搭建环境配置章</code>中我们已经注册好了给github账号，先登录github，点击主页上的<code>New repository</code><br>  <img src="http://img1.ph.126.net/8hjeh433FoydJ7qJka0Z_g==/2589851260732962598.png" alt="repository"><br>  输入<code>注册的github名字.github.io</code>再按下<code>Create repository</code><br>  <img src="http://img2.ph.126.net/AqyYKpLQspxdcewKifX-sA==/6632591688817422278.png" alt="repository"><br>  博客项目就创建成功了，这时我们点击项目中的链接复制按钮<img src="http://img1.ph.126.net/KUmS6BN7Ru9uD7qqNQuQlQ==/6632623574652020095.png" alt="repository">把它粘贴到 <code>_conifg.yml</code></p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">repository: https://github.com/github账号/github账号.github.io.git</div></pre></td></tr></table></figure>
<p>命令行再输入<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">hexo g              #生成静态文件</div><div class="line">hexo d              #部署网站</div></pre></td></tr></table></figure></p>
<p>按提示输入github账号和密码后，看到<code>Deploy done: git</code> 则说明上传成功!这时我们输入<code>http://github账户名.github.io</code>即可看到自己在本地配置的博客。<br>每当我们想写文章时，进入博客文件夹，命令行输入:<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new 文章名</div></pre></td></tr></table></figure></p>
<p>在<code>source</code>文件夹中的<code>_posts</code>编辑文章，文章采用<code>.md</code>格式，mardown的格式可以参照<a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="external">markdown教学</a>这个网站</p>
<h1 id="个性化hexo博客"><a href="#个性化hexo博客" class="headerlink" title="个性化hexo博客"></a>个性化hexo博客</h1><p>现在生成的博客的主题为<code>landscape</code>，我们可以改成主题，我使用的主题为<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">NexT</a>，版本为<code>5.1.2</code>，它有丰富的配置和第三方服务集成，而且文档也齐全。</p>
<h2 id="下载并配置NexT"><a href="#下载并配置NexT" class="headerlink" title="下载并配置NexT"></a>下载并配置NexT</h2><p>  进入博客文件夹下的<code>theme</code>，将<code>landscape</code>文件夹删除，命令行输入:<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/iissnan/hexo-theme-next next</div></pre></td></tr></table></figure></p>
<p>  你也可以直接到<a href="https://github.com/iissnan/hexo-theme-next" target="_blank" rel="external">github</a>下载其安装包，将解压到<code>theme</code>目录下，并更名为<code>next</code>，接着就要使下载的主题生效了，在博客文件夹中打开<code>_config.yml</code>也就是<code>站点配置文件</code>，搜索关键字<code>theme</code>，输入<code>next</code>，在运行命令:<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo clean          #清除 Hexo 的缓存 每次发布时最好清楚一下，避免出现bug </div><div class="line">hexo g              #生成静态文件</div><div class="line">hexo d              #部署网站</div></pre></td></tr></table></figure></p>
<p>  再输入<code>hexo server</code>打开浏览器输入<a href="http://localhost:4000/" target="_blank" rel="external">http://localhost:4000/</a>，就可以在本地看到我们更换的主题了～</p>
<h1 id="个性化NexT主题"><a href="#个性化NexT主题" class="headerlink" title="个性化NexT主题"></a>个性化NexT主题</h1><p>  现在我们得到的还是最基本的<code>NexT</code>，现在开始自定义配置+集成第三方服务:<br>  打开<code>theme</code>目录下<code>next</code>我们可以看到<code>_config.yml</code>,我们称它为<code>主题配置文件</code>，也就是说，这个博客文件有两个配置文件一个是主目录下的配置文件(站点配置文件)，一个是<code>theme</code>目录下的配置文件(主题配置文件)。</p>
<h2 id="为NexT添加RRS订阅"><a href="#为NexT添加RRS订阅" class="headerlink" title="为NexT添加RRS订阅"></a>为NexT添加RRS订阅</h2><p>  我们先打开<code>站点配置文件</code>在文件末尾加上<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">type: atom</div><div class="line">path: atom.xml</div><div class="line">limit: 20</div><div class="line">hub:</div><div class="line">content:</div></pre></td></tr></table></figure></p>
<p>  接着下载<code>RRS插件</code>，在主文件下输入命令:<code>npm install hexo-generator-feed --save</code>刷新浏览器点击右边菜单栏可以看到RRS按钮，说明RRS插件安装成功！<br>  <img src="http://img1.ph.126.net/j1FucaarAAlBK4eQOeLZ3g==/6632594987352305566.png" alt="RRS"></p>
<h2 id="更换主题排版"><a href="#更换主题排版" class="headerlink" title="更换主题排版"></a>更换主题排版</h2><p>  主题默认的排版是<code>Muse</code>,打开<code>主题配置文件</code>,搜索<code>Schemes</code>修改排版,我们可以看到<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Schemes</div><div class="line">  scheme: Muse</div><div class="line"><span class="meta">#</span> scheme: Mist</div><div class="line"><span class="meta">#</span> scheme: Pisces              ##我比  Gemini主题  小</div><div class="line"><span class="meta">#</span> scheme: Gemini              ##我比  Pisces  大</div></pre></td></tr></table></figure></p>
<p>  而<code>NexT</code>有三个排版,<code>Pisces</code>和<code>Gemini</code>只是大小些许不同,排版与参数从上到下为<br>  <img src="http://theme-next.iissnan.com/assets/img/NextSchemes3.png" alt="主题排版"><br>  我所使用的是<code>Mist</code>的排版,如果你对代码方面不熟,你可以直接把<code>scheme: Muse</code>修改成<code>scheme: Mist</code>,进而减少出错概率,接着刷新网页即可看到新的排版。</p>
<h2 id="增加博客标签及新页面"><a href="#增加博客标签及新页面" class="headerlink" title="增加博客标签及新页面"></a>增加博客标签及新页面</h2><p>  这时博客还是空荡荡的，是时候给博客加多些标签了，打开主题配置文件搜索<code>menu</code>，<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">menu:</div><div class="line">home: /</div><div class="line"><span class="meta">#</span>categories: /categories/           ----&gt;去掉#号</div><div class="line"><span class="meta">#</span>about: /about/                     ----&gt;去掉#号</div><div class="line"><span class="meta">#</span>archives: /archives/               ----&gt;去掉#号</div><div class="line"><span class="meta">#</span>tags: /tags/                       ----&gt;去掉#号</div><div class="line"><span class="meta">#</span>sitemap: /sitemap.xml</div><div class="line"><span class="meta">#</span>commonweal: /404/</div><div class="line"><span class="meta">#</span>#等诸多配置##</div></pre></td></tr></table></figure></p>
<p>  刷新页面可以看到出现新的标签，但点击一下发现是空的页面<img src="http://img1.ph.126.net/SHK6Iz3MyPRaY832ZLiEIg==/6632535613724397745.png" alt="page">这是因为还没有生成相关页面，在文件夹下依次输入命令:<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">hexo new page "categories"</div><div class="line">hexo new page "about"</div><div class="line">hexo new page "archives"</div><div class="line">hexo new page "tags"               #生成对应页面</div></pre></td></tr></table></figure></p>
<p>  对于新生成的所有页面都需要配置最后一步，新生成的页面在博客文件夹下的<code>source</code>文件夹下，就那<code>categories</code>举例，打开<code>categories</code>文件夹下的<code>index.md</code>文件,<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">---</div><div class="line">title: categories</div><div class="line">date: 2017-08-19 13:33:49</div><div class="line">type: "categories"                ##增加相关类型##</div><div class="line">---</div></pre></td></tr></table></figure></p>
<p>  其余新页面也是这样处理,增加博客标签就完成了，你可以根据自己的需求生成标签及相应页面。</p>
<h2 id="去除底部版权声明和添加访问量功能"><a href="#去除底部版权声明和添加访问量功能" class="headerlink" title="去除底部版权声明和添加访问量功能"></a>去除底部版权声明和添加访问量功能</h2><p>  打开<code>主题配置文件</code>搜索关键字<code>copyright</code>,将值改成<code>false</code>，刷新浏览器，版权声明消失，接着搜索<code>busuanzi_count</code>，修改成<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">busuanzi_count:</div><div class="line"><span class="meta">  #</span> count values only if the other configs are false</div><div class="line">  enable: true</div><div class="line"><span class="meta">  #</span> custom uv span for the whole site</div><div class="line">  site_uv: true</div><div class="line">  site_uv_header: &lt;i class="fa fa-user"&gt;&lt;/i&gt;</div><div class="line">  site_uv_footer: 访客数</div><div class="line"><span class="meta">  #</span> custom pv span for the whole site</div><div class="line">  site_pv: true</div><div class="line">  site_pv_header: &lt;i class="fa fa-eye"&gt;&lt;/i&gt;</div><div class="line">  site_pv_footer: 访问量</div><div class="line"><span class="meta">  #</span> custom pv span for one page only  #只在阅读文章时出现</div><div class="line">  page_pv: true</div><div class="line">  page_pv_header: &lt;i class="fa fa-file-o"&gt;&lt;/i&gt;</div><div class="line">  page_pv_footer: 点击数</div></pre></td></tr></table></figure></p>
<p>  刷新浏览器在底部可以看到<code>访客数</code>等信息，但<code>访客数</code>和<code>访问量</code>等都需要<code>hexo d</code>后才能真正发挥作用，而在本地会出现其插件的<code>访客数</code>，功能添加完成。</p>
<h2 id="增加文章阅读时长和字数统计信息"><a href="#增加文章阅读时长和字数统计信息" class="headerlink" title="增加文章阅读时长和字数统计信息"></a>增加文章阅读时长和字数统计信息</h2><p>  我们先在主目录下安装<code>wordcount</code>插件，在主目录执行命令<code>npm install hexo-wordcount --save</code>，<br>  再<code>主题配置文件</code>中搜索<code>post_wordcount</code>，将其改成<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">post_wordcount:</div><div class="line">  item_text: true</div><div class="line">  wordcount: true</div><div class="line">  min2read: true</div><div class="line">  totalcount: false</div><div class="line">  separated_meta: true</div></pre></td></tr></table></figure></p>
<p>  接着打开<code>themes\next\layout_macro\post.swig</code>，搜索<code>wordcount(post.content)</code>，在其后面增加<br>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;&#123; wordcount(post.content) &#125;&#125; 字</div><div class="line">.......</div><div class="line">&#123;&#123; min2read(post.content) &#125;&#125; 分钟</div></pre></td></tr></table></figure></p>
<p>  刷新浏览器点击文章即可看到优化效果，增加文章阅读时长和字数统计信息就完成了。</p>
]]></content>
      
        <categories>
            
            <category> hexo教程 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> hexo </tag>
            
            <tag> NexT主题 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
